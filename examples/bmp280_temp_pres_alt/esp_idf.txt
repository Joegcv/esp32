Programme sans bibliothèque car je n'ai pas trouvé de bibliothèque pour esp-idf
c'est directement avec les registres
------------------------------------------------------------------------------
Programme du main.c
/*
 * SPDX-FileCopyrightText: 2010-2022 Espressif Systems (Shanghai) CO LTD
 *
 * SPDX-License-Identifier: CC0-1.0
 */

#include <stdio.h>
#include <inttypes.h>
#include "sdkconfig.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_chip_info.h"
#include "esp_flash.h"
#include "esp_system.h"
#include "esp_log.h"
#include "driver/i2c.h"
#include <math.h>


#define I2C_MASTER_SCL_IO 22        // Broche SCL
#define I2C_MASTER_SDA_IO 21        // Broche SDA
#define I2C_MASTER_NUM I2C_NUM_0    // I2C port number
#define I2C_MASTER_FREQ_HZ 100000   // Fréquence I2C
#define BMP280_ADDR 0x76            // Adresse I2C du BMP280

static const char *TAG = "BMP280_EXAMPLE";


// Fonction d'initialisation de l'I2C
void i2c_master_init() {
    i2c_config_t conf = {
        .mode = I2C_MODE_MASTER,
        .sda_io_num = I2C_MASTER_SDA_IO,
        .scl_io_num = I2C_MASTER_SCL_IO,
        .sda_pullup_en = GPIO_PULLUP_ENABLE,
        .scl_pullup_en = GPIO_PULLUP_ENABLE,
        .master.clk_speed = I2C_MASTER_FREQ_HZ,
    };
    i2c_param_config(I2C_MASTER_NUM, &conf);
    i2c_driver_install(I2C_MASTER_NUM, conf.mode, 0, 0, 0);
}

// Fonction pour écrire une valeur dans un registre spécifique
esp_err_t bmp280_write_reg(uint8_t reg_addr, uint8_t data) {
    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    i2c_master_start(cmd);
    i2c_master_write_byte(cmd, (BMP280_ADDR << 1) | I2C_MASTER_WRITE, true);
    i2c_master_write_byte(cmd, reg_addr, true);
    i2c_master_write_byte(cmd, data, true);
    i2c_master_stop(cmd);
    esp_err_t ret = i2c_master_cmd_begin(I2C_MASTER_NUM, cmd, 1000 / portTICK_PERIOD_MS);
    i2c_cmd_link_delete(cmd);
    return ret;
}

// Fonction pour lire une valeur depuis un registre spécifique
esp_err_t bmp280_read_reg(uint8_t reg_addr, uint8_t *data, size_t len) {
    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    i2c_master_start(cmd);
    i2c_master_write_byte(cmd, (BMP280_ADDR << 1) | I2C_MASTER_WRITE, true);
    i2c_master_write_byte(cmd, reg_addr, true);
    i2c_master_start(cmd);
    i2c_master_write_byte(cmd, (BMP280_ADDR << 1) | I2C_MASTER_READ, true);
    if (len > 1) {
        i2c_master_read(cmd, data, len - 1, I2C_MASTER_ACK);
    }
    i2c_master_read_byte(cmd, data + len - 1, I2C_MASTER_NACK);
    i2c_master_stop(cmd);
    esp_err_t ret = i2c_master_cmd_begin(I2C_MASTER_NUM, cmd, 1000 / portTICK_PERIOD_MS);
    i2c_cmd_link_delete(cmd);
    return ret;
}

// Initialisation du BMP280
void bmp280_init() {
    // Configuration du mode normal et de la résolution
    uint8_t ctrl_meas = 0b10100111; // Mode normal, oversampling x16 pour pression et température
    bmp280_write_reg(0xF4, ctrl_meas);

    uint8_t config = 0b00000101; // Taux de conversion : 1000 ms
    bmp280_write_reg(0xF5, config);
}

//Lire la calibration**********************
typedef struct {
    uint16_t dig_T1; //temperature debut
    int16_t dig_T2;
    int16_t dig_T3;   //temperature fin
    uint16_t dig_P1;   //prssion debut
    int16_t dig_P2;
    int16_t dig_P3;
    int16_t dig_P4;
    int16_t dig_P5;
    int16_t dig_P6;
    int16_t dig_P7;
    int16_t dig_P8;
    int16_t dig_P9;   //pression fin
} bmp280_calib_t;

bmp280_calib_t calib;

//Lecture des coefficients de calibration
void bmp280_read_calibration() {
    uint8_t buf[24];
    esp_err_t ret = bmp280_read_reg(0x88, buf, 24);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "Erreur lors de la lecture des coefficients de calibration");
        return;
    }

    calib.dig_T1 = (buf[1] << 8) | buf[0];
    calib.dig_T2 = (buf[3] << 8) | buf[2];
    calib.dig_T3 = (buf[5] << 8) | buf[4];
    calib.dig_P1 = (buf[7] << 8) | buf[6];   //debut pression
    calib.dig_P2 = (buf[9] << 8) | buf[8];
    calib.dig_P3 = (buf[11] << 8) | buf[10];
    calib.dig_P4 = (buf[13] << 8) | buf[12];
    calib.dig_P5 = (buf[15] << 8) | buf[14];
    calib.dig_P6 = (buf[17] << 8) | buf[16];
    calib.dig_P7 = (buf[19] << 8) | buf[18];
    calib.dig_P8 = (buf[21] << 8) | buf[20];
    calib.dig_P9 = (buf[23] << 8) | buf[22];
    ESP_LOGI(TAG, "dig_T1: %d, dig_T2: %d, dig_T3: %d", calib.dig_T1, calib.dig_T2, calib.dig_T3);
    ESP_LOGI(TAG, "Coefficients chargés : dig_P1=%d, dig_P2=%d, dig_P3=%d", calib.dig_P1, calib.dig_P2, calib.dig_P3);


}


// Lecture des données du BMP280
void bmp280_read_data() {
    uint8_t data[6];
    esp_err_t ret = bmp280_read_reg(0xF7, data, 6); // Lire les 6 premiers octets contenant pression et température
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "Erreur lors de la lecture des données");
        return;
    }

    // Extraire les valeurs brutes
    int32_t adc_p = (data[0] << 12) | (data[1] << 4) | (data[2] >> 4);
    int32_t adc_t = (data[3] << 12) | (data[4] << 4) | (data[5] >> 4);

    // Calibration (implémentation simplifiée)
    // Les coefficients de calibration doivent être lus à partir des registres 0x88 à 0xA1
    // Pour cet exemple, nous simulons des valeurs de calibration
    //int32_t dig_T1 = 27504; // Exemple de valeur de calibration
    //int32_t dig_T2 = 26435; // Exemple de valeur de calibration
    //int32_t dig_T3 = -1000; // Exemple de valeur de calibration

    // Calcul de la température avec calibration
    //int32_t var1 = (((adc_t >> 3) - (dig_T1 << 1)) * dig_T2) >> 11;
    //int32_t var2 = (((((adc_t >> 4) - dig_T1) * ((adc_t >> 4) - dig_T1)) >> 12) * dig_T3) >> 14;
    //int32_t t_fine = var1 + var2;
    //float temperature = (t_fine * 5 + 128) >> 8;
    int32_t var1 = (((adc_t >> 3) - (calib.dig_T1 << 1)) * calib.dig_T2) >> 11;
    int32_t var2 = (((((adc_t >> 4) - calib.dig_T1) * ((adc_t >> 4) - calib.dig_T1)) >> 12) * calib.dig_T3) >> 14;
    int32_t t_fine = var1 + var2;
    float temperature = (t_fine * 5 + 128) >> 8;

    //calcul de la pression avec calibration
    var1 = (int32_t)((t_fine >> 1) - (int32_t)64000);
    var2 = (var1 * var1 * (int32_t)calib.dig_P6) >> 13;
    var2 = var2 + ((var1 * (int32_t)calib.dig_P5) << 1);
    var2 = (var2 >> 1) + ((int32_t)calib.dig_P4 << 16);
    var1 = (((calib.dig_P3 * ((int32_t)((var1 * var1) >> 13))) >> 3) +
            (((calib.dig_P2 * var1) >> 1) << 16)) >> 14;
    var1 = ((32768 + var1) * (int32_t)calib.dig_P1) >> 15;

    if (var1 == 0) {
        ESP_LOGE(TAG, "Division par zéro lors du calcul de la pression");
        return;
    }

    int32_t pressure = (((uint32_t)(((int32_t)1048576 - adc_p) - (var2 >> 12))) * 3125);
    if (pressure < 0x80000000) {
        pressure = (pressure << 1) / ((uint32_t)var1);
    } else {
        pressure = (pressure / (uint32_t)var1) * 2;
    }

    var1 = ((int32_t)calib.dig_P9 * ((int32_t)((pressure >> 3) * (pressure >> 3)) >> 13)) >> 12;
    var2 = ((int32_t)(pressure >> 2) * (int32_t)calib.dig_P8) >> 13;
    int32_t pressure_comp = (int32_t)(pressure + ((var1 + var2 + calib.dig_P7) >> 4));

    //Conversion de la pression en hPa
    float pressure_hpa = pressure_comp / 256.0;
    //Calcul de l'altitude
    const float sea_level_pressure = 1013.25; // Pression au niveau de la mer en hPa
    float altitude = 2307.69 * (1.0 - pow(pressure_hpa / sea_level_pressure, 0.190263));


    // Affichage des résultats
    ESP_LOGI(TAG, "Température : %.2f °C", temperature / 100.0);//convertir en °C
    ESP_LOGI(TAG, "Pression : %.2f hPa", pressure_comp / 256.0);//convertir en hPa
    ESP_LOGI(TAG, "Altitude : %.2f m", altitude);
}



void app_main(void)
{
     // Initialisation de l'I2C
     i2c_master_init();

     // Initialisation du BMP280
     bmp280_init();
    
     bmp280_read_calibration();
 
     // Boucle principale
     while (1) {
         bmp280_read_data();
         vTaskDelay(pdMS_TO_TICKS(2000)); // Attente de 2 secondes
     }
}
---------------------------------------------------------------------------------
dans le cmakeLists.txt du main
idf_component_register(SRCS "hello_world_main.c"
                       INCLUDE_DIRS ".")
dans le cmakeLists.txt principale:
# The following lines of boilerplate have to be in your project's
# CMakeLists in this exact order for cmake to work correctly
cmake_minimum_required(VERSION 3.16)

include($ENV{IDF_PATH}/tools/cmake/project.cmake)
project(projetdebug1)