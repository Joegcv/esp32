#include <stdio.h>
#include <string.h>
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "esp_netif.h"
#include "esp_http_server.h"

#define WIFI_SSID "Service"  // Remplacez par votre SSID
#define WIFI_PASSWORD "Criss#1977"  // Remplacez par votre mot de passe
static const char *TAG = "web_server";

static void event_handler(void* arg, esp_event_base_t event_base,
                          int32_t event_id, void* event_data);

static void wifi_init_sta(void);
static esp_err_t hello_get_handler(httpd_req_t *req);
static void start_webserver(void);

static bool is_webserver_started = false;

void app_main(void)
{
    ESP_ERROR_CHECK(nvs_flash_init());
    wifi_init_sta();
}

static void wifi_init_sta(void)
{
    ESP_LOGI(TAG, "Initialisation du Wi-Fi en mode Station");
    esp_netif_init();
    esp_event_loop_create_default();

    ESP_ERROR_CHECK(esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, &event_handler, NULL));
    ESP_ERROR_CHECK(esp_event_handler_register(IP_EVENT, IP_EVENT_STA_GOT_IP, &event_handler, NULL));

    esp_netif_t *sta_netif = esp_netif_create_default_wifi_sta();
    if (sta_netif == NULL) {
        ESP_LOGE(TAG, "Échec de la création de l'interface STA");
        return;
    }

    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));

    wifi_config_t wifi_config = {
        .sta = {
            .ssid = WIFI_SSID,
            .password = WIFI_PASSWORD,
            .threshold.authmode = WIFI_AUTH_WPA2_PSK,
            .pmf_cfg = {
                .capable = true,
                .required = false
            },
        },
    };

    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config));
    ESP_ERROR_CHECK(esp_wifi_start());
    ESP_LOGI(TAG, "Wi-Fi démarré");
}

static void event_handler(void* arg, esp_event_base_t event_base,
                          int32_t event_id, void* event_data)
{
    if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START) {
        ESP_LOGI(TAG, "Wi-Fi démarré, tentative de connexion...");
        esp_wifi_connect();
    } else if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_DISCONNECTED) {
        ESP_LOGI(TAG, "Déconnecté du réseau Wi-Fi, réessayer...");
        esp_wifi_connect(); // Réessayer la connexion automatiquement
    } else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP) {
        ip_event_got_ip_t* event = (ip_event_got_ip_t*) event_data;
        ESP_LOGI(TAG, "Adresse IP obtenue : " IPSTR, IP2STR(&event->ip_info.ip));

        if (!is_webserver_started) {
            start_webserver();
            is_webserver_started = true;
        }
    }
}

static esp_err_t hello_get_handler(httpd_req_t *req)
{
    const char resp[] = "<html><body><h1>Bonjour hello !</h1></body></html>";
    httpd_resp_send(req, resp, HTTPD_RESP_USE_STRLEN);
    return ESP_OK;
}

static void start_webserver(void)
{
    httpd_handle_t server = NULL;
    httpd_config_t config = HTTPD_DEFAULT_CONFIG();
    config.lru_purge_enable = true;

    if (httpd_start(&server, &config) == ESP_OK) {
        ESP_LOGI(TAG, "Serveur HTTP démarré sur l'URL : http://<IP>:80");

        httpd_uri_t hello_uri = {
            .uri = "/",
            .method = HTTP_GET,
            .handler = hello_get_handler,
            .user_ctx = NULL
        };
        httpd_register_uri_handler(server, &hello_uri);
    } else {
        ESP_LOGE(TAG, "Échec du démarrage du serveur HTTP");
    }
}

----------------------------------------------------------------------

CMakeLists.txt
idf_component_register(SRCS "main.c"
                    INCLUDE_DIRS ".")
